// automatically generated by Xtext
grammar org.xtext.example.idsl.MyDsl with org.eclipse.xtext.common.Terminals 

import "platform:/resource/org.eclipse.gmf.examples.robocompdsl/model/robocompdsl.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

//import "http://robocompdsl/1.0" 
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Interfaces returns Interfaces:
	{Interfaces}
	(imports+=Import ";" (imports+=Import ";")*)?
	'module'
	name=EString
	'{'
		((complextypes+=ComplexType)|
		(refsData+=RefData)|
		(exceptions+=Exception))*
		(interfaces+=Interfaz (interfaces+=Interfaz)*)?
    '};';


Interfaz returns Interfaz:
	{Interfaz}

	'interface'
	name=EString
	'{'
		//('includes' '(' interfaces+=[Interfaz|EString]("," interfaces+=[Interfaz|EString])* ');' )?
		(operaciones+=operacion)*
    '};';
 Import returns Import:
	{Import}
	('import') importURI=EString;
    
ComplexType returns ComplexType:
	Sequence | Enum | TDictionary | Struct;

DataType returns DataType:
	Int0 | Double | TString | Long | Float | Bool | Byte | Short | Complex | RefData;
    
EString returns ecore::EString:
	STRING | ID;
Exception returns Exception:
	'exception'
	name=EString
	'{'
		vars+=DataType (vars+=DataType)* 
    '};';

operacion returns operacion:
	{operacion}
	(idempotent?='idempotent')?
	((return=retparam)|("void"))
	name=EString
	'('
		(((iparams+=iparam)|(oparams+=oparam))("," ((iparams+=iparam)|(oparams+=oparam)))*)? 
    (');' | (')' 'throws' ((throws+=[Exception|EString])|(refException+=RefException)) ("," ((throws+=[Exception|EString])|(refException+=RefException)))* ";")?);

Int0 returns Int:
	{Int}
	'int' (id=EString";")?;

Double returns Double:
	{Double}
	'double'(id=EString";")?;

TString returns TString:
	{TString}
	'string'(id=EString";")?;

Long returns Long:
	{Long}
	'long'(id=EString";")?;

Float returns Float:
	{Float}
	'float'(id=EString";")?;

Bool returns Bool:
	{Bool}
	'bool'(id=EString";")?;

Byte returns Byte:
	{Byte}
	'byte'(id=EString";")?;

Short returns Short:
	{Short}
	'short'(id=EString";")?;

Complex returns Complex:
	complextype=[ComplexType|EString] (id=EString";")?;	
	
Sequence returns Sequence:
	'sequence' '<' (type=DataType) '>' name=EString ";";

Enum returns Enum:
	'enum' name=EString '{' vars+=SymbolicConstant (',' vars+=SymbolicConstant)* '};';

TDictionary returns TDictionary:
	'dictionary' '<'clave=DataType ',' valor=DataType '>' name=EString ";";

Struct returns Struct:
	'struct' name=EString '{'
		vars+=DataType (vars+=DataType )* 
    '};';

iparam returns iparam:
	type=DataType name=EString;

retparam returns retparam:
	 type=DataType;

oparam returns oparam:
	'out' type=DataType  name=EString;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

RefData returns RefData:
	interfaces=[Interfaces|EString]'::' refComplex=[ComplexType|EString] (id=EString ";")?;


SymbolicConstant returns SymbolicConstant:
	{SymbolicConstant}
	name=EString;	

RefException returns RefException:
	interfaces=[Interfaces|EString]'::'exceptions=[Exception|EString];
